name: Playwright Tests with Allure Reports

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Runs at 10:30 AM IST (5:00 AM UTC) every day
    - cron: '00 05 * * *'
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  setup:
    name: "Setup and Install Dependencies"
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.cache-node.outputs.cache-hit }}
      playwright-cache-hit: ${{ steps.cache-playwright.outputs.cache-hit }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Cache node_modules
      id: cache-node
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Install dependencies
      if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm ci
    
    - name: Cache Playwright browsers
      id: cache-playwright
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
    
    - name: Install Playwright Browsers
      if: steps.cache-playwright.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps
    
    - name: Type check
      run: npm run typecheck

  test-projects:
    name: "Test ${{ matrix.project-name }}"
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      # max-parallel: 1  # Ensure sequential execution (commented out for parallel execution)
      fail-fast: false  # Continue running other projects even if one fails
      matrix:
        include:
          - project-name: "Project 1"
            project-id: "project-1-example"
            folder-name: "project-1"
          - project-name: "Project 2" 
            project-id: "project-2-example-2"
            folder-name: "project-2"
          - project-name: "Project 3"
            project-id: "project-3-example-3"
            folder-name: "project-3"
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Restore Playwright browsers cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
    
    - name: Create Allure results directory
      run: mkdir -p allure-results/${{ matrix.folder-name }}
    
    - name: Install Allure Dependencies
      run: npm install allure-playwright allure-commandline
    
    - name: Run ${{ matrix.project-name }} Tests
      run: |
        echo "=== RUNNING TESTS FOR ${{ matrix.project-name }} ==="
        echo "Project ID: ${{ matrix.project-id }}"
        echo "Project Folder: ${{ matrix.folder-name }}"
        echo "Current directory: $(pwd)"
        
        # Check if allure-playwright is properly installed
        echo "Checking allure-playwright installation:"
        npm list allure-playwright || echo "allure-playwright not found in node_modules"
        
        # Check playwright config
        echo "Checking playwright configuration:"
        npx playwright show-config --project=${{ matrix.project-id }} | grep -A 10 -B 5 "reporter\|outputDir" || echo "Could not show config"
        
        # Run tests
        echo "Running tests..."
        npx playwright test --project=${{ matrix.project-id }}
        
        echo "Test execution completed"
        echo "Checking for Allure results:"
        find . -name "*.json" -path "*/allure-results/*" || echo "No Allure JSON files found"
        echo "Allure results directory contents:"
        ls -la allure-results/ || echo "No allure-results directory"
        echo "Project-specific results:"
        ls -la allure-results/${{ matrix.folder-name }}/ || echo "No project results"
        
        echo "Checking for JUnit results:"
        find . -name "*.xml" -path "*/test-results/*" || echo "No JUnit XML files found"
        echo "Test results directory contents:"
        ls -la test-results/ || echo "No test-results directory"
        if [ -f "test-results/results.xml" ]; then
          echo "JUnit XML file found:"
          head -20 test-results/results.xml
        fi
      continue-on-error: true  # Continue to report generation even if tests fail

    - name: Move Allure Results to Project Directory
      run: |
        if ls allure-results/*.json 1> /dev/null 2>&1; then
          mv allure-results/*.json allure-results/${{ matrix.folder-name }}/ 2>/dev/null || true
        fi

    - name: Upload ${{ matrix.project-name }} Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.folder-name }}
        path: allure-results/${{ matrix.folder-name }}/
        retention-days: 30
    
    - name: Upload ${{ matrix.project-name }} Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.folder-name }}
        path: playwright-report/
        retention-days: 30

    - name: Upload ${{ matrix.project-name }} JUnit Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: junit-results-${{ matrix.folder-name }}
        path: test-results/
        retention-days: 30

    - name: Debug JUnit Results
      if: always()
      run: |
        echo "=== DEBUGGING JUNIT RESULTS ==="
        echo "Current directory: $(pwd)"
        echo "Test results directory exists:"
        ls -la test-results/ || echo "No test-results directory"
        echo "Looking for XML files:"
        find . -name "*.xml" || echo "No XML files found"
        echo "Looking for results.xml specifically:"
        find . -name "results.xml" || echo "No results.xml found"

    - name: Generate Test Summary
      if: always()
      run: |
        echo "## Test Results for ${{ matrix.project-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-results/results.xml" ]; then
          # Parse JUnit XML and extract summary
          total_tests=$(xmllint --xpath "string(//testsuites/@tests)" test-results/results.xml 2>/dev/null || echo "0")
          failed_tests=$(xmllint --xpath "string(//testsuites/@failures)" test-results/results.xml 2>/dev/null || echo "0")
          skipped_tests=$(xmllint --xpath "string(//testsuites/@skipped)" test-results/results.xml 2>/dev/null || echo "0")
          
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | $total_tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed | $failed_tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Skipped | $skipped_tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Passed | $((total_tests - failed_tests - skipped_tests)) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No JUnit results found for ${{ matrix.project-name }}" >> $GITHUB_STEP_SUMMARY
        fi

  generate-allure-report:
    name: "Generate Consolidated Allure Report"
    needs: test-projects
    runs-on: ubuntu-latest
    if: always()  # Run even if some tests failed
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install Allure Commandline
      run: npm install -g allure-commandline
    
    - name: Create allure-results directory structure
      run: |
        mkdir -p allure-results/project-1
        mkdir -p allure-results/project-2
        mkdir -p allure-results/project-3
    
    - name: Download Project 1 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-1
        path: allure-results/project-1/
      continue-on-error: true
    
    - name: Download Project 2 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-2
        path: allure-results/project-2/
      continue-on-error: true
    
    - name: Download Project 3 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-3
        path: allure-results/project-3/
      continue-on-error: true
    
    - name: Download All JUnit Results
      uses: actions/download-artifact@v4
      with:
        pattern: junit-results-*
        path: junit-results/
      continue-on-error: true
    
    - name: Consolidate JUnit Results
      run: |
        mkdir -p consolidated-junit
        echo '<?xml version="1.0" encoding="UTF-8"?>' > consolidated-junit/consolidated-results.xml
        echo '<testsuites>' >> consolidated-junit/consolidated-results.xml
        
        # Combine all JUnit XML files
        for xml_file in junit-results/*/results.xml; do
          if [ -f "$xml_file" ]; then
            echo "Processing: $xml_file"
            # Extract testsuite elements and append
            sed -n '/<testsuite/,/<\/testsuite>/p' "$xml_file" | sed '1d;$d' >> consolidated-junit/consolidated-results.xml
          fi
        done
        
        echo '</testsuites>' >> consolidated-junit/consolidated-results.xml
        
        echo "Consolidated JUnit results:"
        cat consolidated-junit/consolidated-results.xml
    
    - name: Download Previous Allure History (for trends)
      uses: actions/download-artifact@v4
      with:
        name: allure-history
        path: allure-history/
      continue-on-error: true
    
    - name: Prepare Allure Results with Trend Metadata
      run: |
        # Create proper Allure results structure
        mkdir -p allure-results/consolidated
        
        echo "=== DEBUGGING CONSOLIDATED RESULTS ==="
        echo "Checking individual project directories:"
        echo "Project 1 contents:"
        ls -la allure-results/project-1/ || echo "Project 1 directory not found"
        echo "Project 2 contents:"
        ls -la allure-results/project-2/ || echo "Project 2 directory not found"
        echo "Project 3 contents:"
        ls -la allure-results/project-3/ || echo "Project 3 directory not found"
        
        # Copy all project results to consolidated directory
        if [ -d "allure-results/project-1" ]; then
          echo "Copying Project 1 results..."
          cp -r allure-results/project-1/* allure-results/consolidated/ 2>/dev/null || true
        fi
        if [ -d "allure-results/project-2" ]; then
          echo "Copying Project 2 results..."
          cp -r allure-results/project-2/* allure-results/consolidated/ 2>/dev/null || true
        fi
        if [ -d "allure-results/project-3" ]; then
          echo "Copying Project 3 results..."
          cp -r allure-results/project-3/* allure-results/consolidated/ 2>/dev/null || true
        fi
        
        echo "Consolidated results structure:"
        ls -la allure-results/consolidated/
        
        echo "Looking for JSON files in consolidated:"
        find allure-results/consolidated -name "*.json" -type f || echo "No JSON files found"
        
        # Create execution.json for trend tracking
        cat > allure-results/consolidated/execution.json << 'EOF'
        {
          "name": "GitHub Actions Execution",
          "type": "github",
          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "buildOrder": ${{ github.run_number }},
          "reportName": "Playwright Allure Report",
          "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/",
          "buildName": "Workflow Run ${{ github.run_number }}",
          "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }
        EOF
        
        echo "Final consolidated results structure:"
        ls -la allure-results/consolidated/
    
    - name: Generate Individual Allure Reports
      run: |
        if [ "$(ls -A allure-results/project-1/)" ]; then
          npx allure generate allure-results/project-1 -o allure-report/project-1
        fi
        
        if [ "$(ls -A allure-results/project-2/)" ]; then
          npx allure generate allure-results/project-2 -o allure-report/project-2
        fi
        
        if [ "$(ls -A allure-results/project-3/)" ]; then
          npx allure generate allure-results/project-3 -o allure-report/project-3
        fi
    
    - name: Generate Consolidated Allure Report with Trends
      run: |
        echo "=== GENERATING CONSOLIDATED REPORT ==="
        echo "Checking if consolidated results exist:"
        if [ -d "allure-results/consolidated" ] && [ "$(ls -A allure-results/consolidated/)" ]; then
          echo "Consolidated results found!"
          echo "Contents of consolidated results:"
          ls -la allure-results/consolidated/
          echo "JSON files in consolidated:"
          find allure-results/consolidated -name "*.json" -type f || echo "No JSON files found"
          
          # Create allure.properties in the correct location
          mkdir -p allure-report/consolidated
          echo "allure.results.directory=allure-results/consolidated" > allure-report/consolidated/allure.properties
          echo "allure.report.directory=allure-report/consolidated" >> allure-report/consolidated/allure.properties
          echo "allure.trends.enabled=true" >> allure-report/consolidated/allure.properties
          echo "allure.trends.history.size=10" >> allure-report/consolidated/allure.properties
          echo "allure.trends.history.days=30" >> allure-report/consolidated/allure.properties
          echo "allure.execution.environment=GitHub Actions" >> allure-report/consolidated/allure.properties
          echo "allure.execution.runner=Playwright" >> allure-report/consolidated/allure.properties
          echo "allure.execution.workflow=playwright-allure-consolidated" >> allure-report/consolidated/allure.properties
          echo "allure.execution.run=${{ github.run_number }}" >> allure-report/consolidated/allure.properties
          echo "allure.execution.commit=${{ github.sha }}" >> allure-report/consolidated/allure.properties
          echo "allure.execution.start=2024-01-01T00:00:00Z" >> allure-report/consolidated/allure.properties
          echo "allure.execution.stop=2024-12-31T23:59:59Z" >> allure-report/consolidated/allure.properties
          
          echo "Created allure.properties:"
          cat allure-report/consolidated/allure.properties
          
          # Check if we have previous history
          if [ -d "allure-history" ] && [ "$(ls -A allure-history/)" ]; then
            echo "Found previous history, copying for trends..."
            echo "History contents:"
            ls -la allure-history/
            cp -r allure-history/* allure-report/consolidated/ 2>/dev/null || true
            echo "After copying history:"
            ls -la allure-report/consolidated/
            # Generate report with existing history
            echo "Generating report with existing history..."
            npx allure generate allure-results/consolidated --report-dir allure-report/consolidated
          else
            echo "No previous history found, creating new report..."
            # Clean the directory first to avoid conflicts
            rm -rf allure-report/consolidated/*
            echo "Generating new report..."
            npx allure generate allure-results/consolidated -o allure-report/consolidated
          fi
          
          echo "Report generation completed"
          echo "Final report contents:"
          ls -la allure-report/consolidated/
          
          # Save history for next run
          mkdir -p allure-history
          if [ -d "allure-report/consolidated/history" ]; then
            echo "Copying history for next run..."
            cp -r allure-report/consolidated/history allure-history/ 2>/dev/null || true
          fi
          if [ -d "allure-report/consolidated/widgets" ]; then
            echo "Copying widgets for next run..."
            cp -r allure-report/consolidated/widgets allure-history/ 2>/dev/null || true
          fi
          
          echo "Final history contents:"
          ls -la allure-history/ || echo "No history directory"
        else
          echo "No consolidated results found!"
          echo "Checking individual project results:"
          echo "Project 1:"
          ls -la allure-results/project-1/ || echo "Project 1 not found"
          echo "Project 2:"
          ls -la allure-results/project-2/ || echo "Project 2 not found"
          echo "Project 3:"
          ls -la allure-results/project-3/ || echo "Project 3 not found"
          
          mkdir -p allure-report/consolidated
          echo "<h1>No test results found</h1>" > allure-report/consolidated/index.html
          echo "<p>No test results were generated or found in the consolidated directory.</p>" >> allure-report/consolidated/index.html
        fi
    
    - name: Create Report Index Page
      run: |
        mkdir -p allure-report
        cat > allure-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Allure Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                .report-card { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; }
                .report-card h2 { color: #333; margin-top: 0; }
                .report-card a { color: #0066cc; text-decoration: none; font-weight: bold; }
                .report-card a:hover { text-decoration: underline; }
                .consolidated { background-color: #f0f8ff; border-color: #0066cc; }
                .individual { background-color: #f9f9f9; }
                .timestamp { color: #666; font-size: 0.9em; }
                .run-info { background-color: #f0f0f0; padding: 10px; border-radius: 4px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🎭 Playwright Test Reports</h1>
                <div class="run-info">
                    <strong>Generated:</strong> $(date)<br>
                    <strong>Workflow Run:</strong> ${{ github.run_number }}<br>
                    <strong>Commit:</strong> ${{ github.sha }}
                </div>
                
                <div class="report-card consolidated">
                    <h2>📊 Consolidated Report</h2>
                    <p>Combined results from all test projects</p>
                    <a href="consolidated/">View Consolidated Report →</a>
                </div>
                
                <div class="report-card individual">
                    <h2>🎯 Individual Project Reports</h2>
                    <p><a href="project-1/">Project 1 Report →</a></p>
                    <p><a href="project-2/">Project 2 Report →</a></p>
                    <p><a href="project-3/">Project 3 Report →</a></p>
                </div>
                
                <div style="margin-top: 40px; padding: 20px; background-color: #f5f5f5; border-radius: 8px;">
                    <h3>📋 About These Reports</h3>
                    <ul>
                        <li><strong>Consolidated Report:</strong> Shows combined results from all projects</li>
                        <li><strong>Individual Reports:</strong> Detailed results for each specific project</li>
                        <li><strong>Test Results:</strong> Include pass/fail status, execution time, and error details</li>
                        <li><strong>Historical Data:</strong> Previous runs are preserved as artifacts for 30 days</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
        EOF
    
    - name: Upload Consolidated Allure Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report-consolidated
        path: allure-report/
        retention-days: 30
    
    - name: Upload Allure History (for trends)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-history
        path: allure-history/
        retention-days: 30
    
    - name: Upload Consolidated JUnit Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: junit-results-consolidated
        path: consolidated-junit/
        retention-days: 30
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: allure-report/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4

  email-notification:
    name: "Send Email Notification"
    needs: [generate-allure-report]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Consolidated Report
      uses: actions/download-artifact@v4
      with:
        name: allure-report-consolidated
        path: allure-report/
    
    - name: Download Consolidated JUnit Results
      uses: actions/download-artifact@v4
      with:
        name: junit-results-consolidated
        path: consolidated-junit/
      continue-on-error: true
    
    - name: Generate Email Content
      run: |
        # Create email content
        cat > email-content.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Test Report - Run ${{ github.run_number }}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background-color: #f0f8ff; padding: 20px; border-radius: 8px; }
                .summary { background-color: #f9f9f9; padding: 15px; border-radius: 8px; margin: 20px 0; }
                .success { color: #28a745; }
                .failure { color: #dc3545; }
                .warning { color: #ffc107; }
                .button { background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 0; }
                .footer { margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-radius: 8px; font-size: 0.9em; color: #666; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🎭 Playwright Test Report</h1>
                <p><strong>Workflow Run:</strong> ${{ github.run_number }}</p>
                <p><strong>Repository:</strong> ${{ github.repository }}</p>
                <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                <p><strong>Commit:</strong> ${{ github.sha }}</p>
                <p><strong>Generated:</strong> $(date)</p>
            </div>
            
            <div class="summary">
                <h2>📊 Test Summary</h2>
        EOF
        
        # Add test summary from JUnit results
        if [ -f "consolidated-junit/consolidated-results.xml" ]; then
          total_tests=$(xmllint --xpath "string(//testsuites/@tests)" consolidated-junit/consolidated-results.xml 2>/dev/null || echo "0")
          failed_tests=$(xmllint --xpath "string(//testsuites/@failures)" consolidated-junit/consolidated-results.xml 2>/dev/null || echo "0")
          skipped_tests=$(xmllint --xpath "string(//testsuites/@skipped)" consolidated-junit/consolidated-results.xml 2>/dev/null || echo "0")
          passed_tests=$((total_tests - failed_tests - skipped_tests))
          
          cat >> email-content.html << EOF
                <p><strong>Total Tests:</strong> $total_tests</p>
                <p><strong>Passed:</strong> <span class="success">$passed_tests</span></p>
                <p><strong>Failed:</strong> <span class="failure">$failed_tests</span></p>
                <p><strong>Skipped:</strong> <span class="warning">$skipped_tests</span></p>
        EOF
        else
          cat >> email-content.html << 'EOF'
                <p><strong>Status:</strong> <span class="warning">Test results not available</span></p>
        EOF
        fi
        
        cat >> email-content.html << 'EOF'
            </div>
            
            <div style="margin: 20px 0;">
                <h2>🔗 Quick Links</h2>
                <a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" class="button">View Allure Report</a>
                <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" class="button">View Workflow Run</a>
            </div>
            
            <div class="footer">
                <p>This email was automatically generated by GitHub Actions.</p>
                <p>To unsubscribe or modify email settings, please contact your administrator.</p>
            </div>
        </body>
        </html>
        EOF
        
        echo "Email content generated successfully"
    
    - name: Send Email via GitHub API (Alternative)
      if: env.EMAIL_RECIPIENTS != ''
      run: |
        # This is a placeholder for GitHub API email sending
        # You would need to implement this with your email service
        echo "Email would be sent to: ${{ env.EMAIL_RECIPIENTS }}"
        echo "Email content is ready in email-content.html"
    
    - name: Upload Email Content
      uses: actions/upload-artifact@v4
      with:
        name: email-content
        path: email-content.html
        retention-days: 7


