name: Playwright Tests with Allure Reports

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Runs at 10:30 AM IST (5:00 AM UTC) every day
    - cron: '00 05 * * *'
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  setup:
    name: "Setup and Install Dependencies"
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.cache-node.outputs.cache-hit }}
      playwright-cache-hit: ${{ steps.cache-playwright.outputs.cache-hit }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Cache node_modules
      id: cache-node
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Install dependencies
      if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm ci
    
    - name: Cache Playwright browsers
      id: cache-playwright
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
    
    - name: Install Playwright Browsers
      if: steps.cache-playwright.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps
    
    - name: Type check
      run: npm run typecheck

  test-projects:
    name: "Test ${{ matrix.project-name }}"
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false  # Continue running other projects even if one fails
      matrix:
        include:
          - project-name: "Project 1"
            project-id: "project-1-example"
            folder-name: "project-1"
          - project-name: "Project 2" 
            project-id: "project-2-example-2"
            folder-name: "project-2"
          - project-name: "Project 3"
            project-id: "project-3-example-3"
            folder-name: "project-3"
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Restore Playwright browsers cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
    
    - name: Create Allure results directory
      run: mkdir -p allure-results/${{ matrix.folder-name }}
    
    - name: Run ${{ matrix.project-name }} Tests
      run: npx playwright test --project=${{ matrix.project-id }}
      continue-on-error: true  # Continue to report generation even if tests fail
    
    - name: Move Allure results to project directory
      run: |
        if ls allure-results/*.json 1> /dev/null 2>&1; then
          mv allure-results/*.json allure-results/${{ matrix.folder-name }}/ || true
        fi
        # Ensure .last-run.json exists
        echo '{}' > allure-results/${{ matrix.folder-name }}/.last-run.json
    
    - name: Upload ${{ matrix.project-name }} Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.folder-name }}
        path: allure-results/${{ matrix.folder-name }}/
        retention-days: 1  # Short retention for intermediate artifacts
    
    - name: Upload ${{ matrix.project-name }} Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.folder-name }}
        path: playwright-report/
        retention-days: 30

  generate-allure-report:
    name: "Generate Consolidated Allure Report"
    needs: test-projects
    runs-on: ubuntu-latest
    if: always()  # Run even if some tests failed
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Create allure-results directory structure
      run: |
        mkdir -p allure-results/project-1
        mkdir -p allure-results/project-2
        mkdir -p allure-results/project-3
    
    - name: Download Project 1 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-1
        path: allure-results/project-1/
      continue-on-error: true
    
    - name: Download Project 2 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-2
        path: allure-results/project-2/
      continue-on-error: true
    
    - name: Download Project 3 Allure Results
      uses: actions/download-artifact@v4
      with:
        name: allure-results-project-3
        path: allure-results/project-3/
      continue-on-error: true
    
    - name: List downloaded results (debug)
      run: |
        echo "=== Project 1 Results ==="
        ls -la allure-results/project-1/ || echo "No Project 1 results"
        echo "=== Project 2 Results ==="
        ls -la allure-results/project-2/ || echo "No Project 2 results"
        echo "=== Project 3 Results ==="
        ls -la allure-results/project-3/ || echo "No Project 3 results"
    
    - name: Generate Individual Allure Reports
      run: |
        # Generate individual project reports
        if [ "$(ls -A allure-results/project-1/)" ]; then
          npx allure generate allure-results/project-1 --clean -o allure-report/project-1
        fi
        
        if [ "$(ls -A allure-results/project-2/)" ]; then
          npx allure generate allure-results/project-2 --clean -o allure-report/project-2
        fi
        
        if [ "$(ls -A allure-results/project-3/)" ]; then
          npx allure generate allure-results/project-3 --clean -o allure-report/project-3
        fi
    
    - name: Generate Consolidated Allure Report
      run: |
        # Combine all results for consolidated report
        RESULTS_DIRS=""
        if [ "$(ls -A allure-results/project-1/)" ]; then
          RESULTS_DIRS="$RESULTS_DIRS allure-results/project-1"
        fi
        if [ "$(ls -A allure-results/project-2/)" ]; then
          RESULTS_DIRS="$RESULTS_DIRS allure-results/project-2"
        fi
        if [ "$(ls -A allure-results/project-3/)" ]; then
          RESULTS_DIRS="$RESULTS_DIRS allure-results/project-3"
        fi
        
        if [ -n "$RESULTS_DIRS" ]; then
          npx allure generate $RESULTS_DIRS --clean -o allure-report/consolidated
        else
          echo "No test results found to generate consolidated report"
          mkdir -p allure-report/consolidated
          echo "<h1>No test results found</h1>" > allure-report/consolidated/index.html
        fi
    
    - name: Create Report Index Page
      run: |
        mkdir -p allure-report
        cat > allure-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Allure Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                .report-card { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; }
                .report-card h2 { color: #333; margin-top: 0; }
                .report-card a { color: #0066cc; text-decoration: none; font-weight: bold; }
                .report-card a:hover { text-decoration: underline; }
                .consolidated { background-color: #f0f8ff; border-color: #0066cc; }
                .individual { background-color: #f9f9f9; }
                .timestamp { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ðŸŽ­ Playwright Test Reports</h1>
                <p class="timestamp">Generated: $(date)</p>
                
                <div class="report-card consolidated">
                    <h2>ðŸ“Š Consolidated Report</h2>
                    <p>Combined results from all test projects</p>
                    <a href="consolidated/">View Consolidated Report â†’</a>
                </div>
                
                <div class="report-card individual">
                    <h2>ðŸŽ¯ Individual Project Reports</h2>
                    <p><a href="project-1/">Project 1 Report â†’</a></p>
                    <p><a href="project-2/">Project 2 Report â†’</a></p>
                    <p><a href="project-3/">Project 3 Report â†’</a></p>
                </div>
                
                <div style="margin-top: 40px; padding: 20px; background-color: #f5f5f5; border-radius: 8px;">
                    <h3>ðŸ“‹ About These Reports</h3>
                    <ul>
                        <li><strong>Consolidated Report:</strong> Shows combined results from all projects</li>
                        <li><strong>Individual Reports:</strong> Detailed results for each specific project</li>
                        <li><strong>Test Results:</strong> Include pass/fail status, execution time, and error details</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
        EOF
    
    - name: Upload Consolidated Allure Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report-consolidated
        path: allure-report/
        retention-days: 30
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: allure-report/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4

  cleanup:
    name: "Cleanup Intermediate Artifacts"
    needs: generate-allure-report
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete intermediate artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          allure-results-project-1
          allure-results-project-2
          allure-results-project-3
        failOnError: false
