name: Direct Deploy HTML Reports

on:
  workflow_dispatch:  # Manual trigger only

permissions:
  contents: write

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Show Cache Status
        run: |
          if [ "${{ steps.cache-playwright.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ Playwright browsers loaded from cache"
          else
            echo "üì• Playwright browsers installed fresh"
          fi

      - name: Run Tests
        run: npx playwright test

      - name: Organize Individual Project Reports
        run: |
          # Organize the consolidated results into individual project reports
          echo "üéØ Organizing individual project reports..."
          
          # Create project directories
          mkdir -p project-reports/project-1
          mkdir -p project-reports/project-2
          mkdir -p project-reports/project-3
          
          # Copy the main HTML report to each project (they'll all have the same content)
          cp -r playwright-report/* project-reports/project-1/ 2>/dev/null || echo "‚ö†Ô∏è No HTML report for Project 1"
          cp -r playwright-report/* project-reports/project-2/ 2>/dev/null || echo "‚ö†Ô∏è No HTML report for Project 2"
          cp -r playwright-report/* project-reports/project-3/ 2>/dev/null || echo "‚ö†Ô∏è No HTML report for Project 3"
          
          # Copy JUnit results to each project
          cp test-results/results.xml project-reports/project-1/results.xml 2>/dev/null || echo "‚ö†Ô∏è No JUnit results for Project 1"
          cp test-results/results.xml project-reports/project-2/results.xml 2>/dev/null || echo "‚ö†Ô∏è No JUnit results for Project 2"
          cp test-results/results.xml project-reports/project-3/results.xml 2>/dev/null || echo "‚ö†Ô∏è No JUnit results for Project 3"
          
          echo "‚úÖ Individual project reports organized"

      - name: Consolidate JUnit Results
        run: |
          echo "üìä Consolidating JUnit results..."
          mkdir -p consolidated-junit
          
          # Copy individual JUnit files
          cp project-reports/project-1/results.xml consolidated-junit/project-1-results.xml
          cp project-reports/project-2/results.xml consolidated-junit/project-2-results.xml
          cp project-reports/project-3/results.xml consolidated-junit/project-3-results.xml
          
          # Create consolidated JUnit XML
          cat > consolidated-junit/consolidated-results.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
          EOF
          
          # Extract testsuite elements from each project and combine
          for file in consolidated-junit/project-*-results.xml; do
            if [ -f "$file" ]; then
              echo "Processing $file..."
              # Extract testsuite content (remove XML declaration and testsuites wrapper)
              sed -n '/<testsuite/,/<\/testsuite>/p' "$file" >> consolidated-junit/consolidated-results.xml
            fi
          done
          
          echo '</testsuites>' >> consolidated-junit/consolidated-results.xml
          
          echo "‚úÖ JUnit results consolidated"

      - name: Upload JUnit Results
        uses: actions/upload-artifact@v4
        with:
          name: junit-results-consolidated
          path: consolidated-junit/
          retention-days: 30

      - name: Debug - Check Playwright Report
        run: |
          echo "üìÅ Checking playwright-report directory:"
          ls -la playwright-report/ || echo "playwright-report directory not found"
          echo ""
          echo "üìÑ Checking if index.html exists:"
          if [ -f "playwright-report/index.html" ]; then
            echo "‚úÖ index.html found"
            head -5 playwright-report/index.html
          else
            echo "‚ùå index.html not found"
          fi

      - name: Create Consolidated HTML Report
        run: |
          mkdir -p consolidated-html-report
          cat > consolidated-html-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Playwright Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .report-card { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; }
                  .report-card h2 { color: #333; margin-top: 0; }
                  .report-card a { color: #0066cc; text-decoration: none; font-weight: bold; }
                  .report-card a:hover { text-decoration: underline; }
                  .consolidated { background-color: #f0f8ff; border-color: #0066cc; }
                  .individual { background-color: #f9f9f9; }
                  .timestamp { color: #666; font-size: 0.9em; }
                  .run-info { background-color: #f0f0f0; padding: 10px; border-radius: 4px; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üé≠ Playwright Test Reports</h1>
                  <div class="run-info">
                      <strong>Generated:</strong> $(date)<br>
                      <strong>Workflow Run:</strong> ${{ github.run_number }}<br>
                      <strong>Commit:</strong> ${{ github.sha }}
                  </div>
                  
                  <div class="report-card consolidated">
                      <h2>üìä Consolidated Results</h2>
                      <p>Combined results from all test projects</p>
                      <a href="consolidated/">View Consolidated Report ‚Üí</a>
                  </div>
                  
                  <div class="report-card individual">
                      <h2>üéØ Individual Project Reports</h2>
                      <p><a href="project-1/">Project 1 Report ‚Üí</a></p>
                      <p><a href="project-2/">Project 2 Report ‚Üí</a></p>
                      <p><a href="project-3/">Project 3 Report ‚Üí</a></p>
                  </div>
                  
                  <div style="margin-top: 40px; padding: 20px; background-color: #f5f5f5; border-radius: 8px;">
                      <h3>üìã About These Reports</h3>
                      <ul>
                          <li><strong>Consolidated Report:</strong> Shows combined results from all projects</li>
                          <li><strong>Individual Reports:</strong> Detailed results for each specific project</li>
                          <li><strong>Test Results:</strong> Include pass/fail status, execution time, and error details</li>
                          <li><strong>Screenshots:</strong> Visual evidence captured during test execution</li>
                      </ul>
                  </div>
              </div>
          </body>
          </html>
          EOF

          # Copy the Playwright report as consolidated
          mkdir -p consolidated-html-report/consolidated
          if [ -d "playwright-report" ] && [ "$(ls -A playwright-report)" ]; then
            cp -r playwright-report/* consolidated-html-report/consolidated/
            echo "‚úÖ Playwright report copied to consolidated/"
          else
            echo "‚ö†Ô∏è No Playwright report found, creating placeholder"
            echo "<h1>No consolidated report available</h1>" > consolidated-html-report/consolidated/index.html
          fi

          # Copy individual Playwright reports
          cp -r project-reports/project-1/* consolidated-html-report/project-1/ 2>/dev/null || echo "‚ö†Ô∏è Project 1 report not found"
          cp -r project-reports/project-2/* consolidated-html-report/project-2/ 2>/dev/null || echo "‚ö†Ô∏è Project 2 report not found"
          cp -r project-reports/project-3/* consolidated-html-report/project-3/ 2>/dev/null || echo "‚ö†Ô∏è Project 3 report not found"

          echo "üìÅ Consolidated HTML report created"
          ls -la consolidated-html-report/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./consolidated-html-report
          force_orphan: true

      - name: Show Deployment URL
        run: |
          echo "‚úÖ GitHub Pages deployed successfully!"
          echo "üåê URL: https://karthmoh-nitt.github.io/mygithubactions/"
          echo "üìä HTML Reports are now available!"

  email-notification:
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: always()
    steps:
      - name: Check if email secrets are configured
        run: |
          if [ -z "${{ secrets.EMAIL_SMTP_HOST }}" ]; then
            echo "‚ö†Ô∏è Email SMTP host not configured, skipping email notification"
            exit 0
          fi
          echo "‚úÖ Email configuration found, proceeding with notification"

      - name: Download JUnit Results
        uses: actions/download-artifact@v4
        with:
          name: junit-results-consolidated
          path: consolidated-junit

      - name: Generate Email Content
        run: |
          echo "üìß Generating email content..."
          
          # Find the consolidated JUnit XML file
          JUNIT_FILE=""
          for file in consolidated-junit/*.xml; do
            if [ -f "$file" ]; then
              JUNIT_FILE="$file"
              break
            fi
          done
          
          if [ -z "$JUNIT_FILE" ]; then
            echo "‚ö†Ô∏è No JUnit XML file found"
            TOTAL_TESTS=0
            PASSED_TESTS=0
            FAILED_TESTS=0
          else
            echo "üìÑ Found JUnit file: $JUNIT_FILE"
            
            # Extract test counts using xmllint and grep fallback
            TOTAL_TESTS=$(xmllint --xpath "//testsuites/@tests" "$JUNIT_FILE" 2>/dev/null | sed 's/tests="//' | sed 's/"//' || grep -o 'tests="[^"]*"' "$JUNIT_FILE" | head -1 | sed 's/tests="//' | sed 's/"//')
            PASSED_TESTS=$(xmllint --xpath "//testsuites/@tests - //testsuites/@failures" "$JUNIT_FILE" 2>/dev/null || echo "$TOTAL_TESTS")
            FAILED_TESTS=$(xmllint --xpath "//testsuites/@failures" "$JUNIT_FILE" 2>/dev/null | sed 's/failures="//' | sed 's/"//' || grep -o 'failures="[^"]*"' "$JUNIT_FILE" | head -1 | sed 's/failures="//' | sed 's/"//')
            
            # Set defaults if extraction failed
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            PASSED_TESTS=${PASSED_TESTS:-0}
            FAILED_TESTS=${FAILED_TESTS:-0}
          fi
          
          CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > email-content.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Playwright Test Results</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .header { background-color: #f0f8ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .stats { display: flex; gap: 20px; margin: 20px 0; }
                  .stat-card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; text-align: center; flex: 1; }
                  .passed { border-left: 4px solid #28a745; }
                  .failed { border-left: 4px solid #dc3545; }
                  .total { border-left: 4px solid #007bff; }
                  .links { margin-top: 20px; }
                  .links a { color: #0066cc; text-decoration: none; font-weight: bold; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üé≠ Playwright Test Results</h1>
                  <p><strong>Generated:</strong> $CURRENT_DATE</p>
                  <p><strong>Workflow Run:</strong> ${{ github.run_number }}</p>
                  <p><strong>Commit:</strong> ${{ github.sha }}</p>
              </div>
              
              <div class="stats">
                  <div class="stat-card total">
                      <h3>Total Tests</h3>
                      <h2>$TOTAL_TESTS</h2>
                  </div>
                  <div class="stat-card passed">
                      <h3>Passed</h3>
                      <h2>$PASSED_TESTS</h2>
                  </div>
                  <div class="stat-card failed">
                      <h3>Failed</h3>
                      <h2>$FAILED_TESTS</h2>
                  </div>
              </div>
              
              <div class="links">
                  <h3>üìä View Detailed Reports:</h3>
                  <p><a href="https://karthmoh-nitt.github.io/mygithubactions/">üåê Main Report Dashboard</a></p>
                  <p><a href="https://karthmoh-nitt.github.io/mygithubactions/consolidated/">üìã Consolidated Report</a></p>
                  <p><a href="https://karthmoh-nitt.github.io/mygithubactions/project-1/">üéØ Project 1 Report</a></p>
                  <p><a href="https://karthmoh-nitt.github.io/mygithubactions/project-2/">üéØ Project 2 Report</a></p>
                  <p><a href="https://karthmoh-nitt.github.io/mygithubactions/project-3/">üéØ Project 3 Report</a></p>
              </div>
          </body>
          </html>
          EOF
          
          echo "‚úÖ Email content generated with:"
          echo "   Total Tests: $TOTAL_TESTS"
          echo "   Passed: $PASSED_TESTS"
          echo "   Failed: $FAILED_TESTS"

      - name: Send Email Notification
        run: |
          echo "üìß Sending email notification..."
          
          # Install Python and required packages
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install secure-smtplib
          
          # Create Python script for sending email
          cat > send_email.py << 'EOF'
          import smtplib
          import os
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          
          # Email configuration
          smtp_host = os.environ.get('EMAIL_SMTP_HOST')
          smtp_port = int(os.environ.get('EMAIL_SMTP_PORT', '587'))
          smtp_user = os.environ.get('EMAIL_SMTP_USER')
          smtp_pass = os.environ.get('EMAIL_SMTP_PASS')
          to_email = os.environ.get('EMAIL_TO')
          
          if not all([smtp_host, smtp_user, smtp_pass, to_email]):
              print("‚ùå Missing email configuration")
              exit(1)
          
          # Create message
          msg = MIMEMultipart('alternative')
          msg['Subject'] = f"Playwright Test Results - Run #{os.environ.get('GITHUB_RUN_NUMBER')}"
          msg['From'] = smtp_user
          msg['To'] = to_email
          
          # Read HTML content
          with open('email-content.html', 'r') as f:
              html_content = f.read()
          
          msg.attach(MIMEText(html_content, 'html'))
          
          # Send email
          try:
              server = smtplib.SMTP(smtp_host, smtp_port)
              server.starttls()
              server.login(smtp_user, smtp_pass)
              server.send_message(msg)
              server.quit()
              print("‚úÖ Email sent successfully!")
          except Exception as e:
              print(f"‚ùå Failed to send email: {e}")
              exit(1)
          EOF
          
          # Set environment variables
          export EMAIL_SMTP_HOST="${{ secrets.EMAIL_SMTP_HOST }}"
          export EMAIL_SMTP_PORT="${{ secrets.EMAIL_SMTP_PORT }}"
          export EMAIL_SMTP_USER="${{ secrets.EMAIL_SMTP_USER }}"
          export EMAIL_SMTP_PASS="${{ secrets.EMAIL_SMTP_PASS }}"
          export EMAIL_TO="${{ secrets.EMAIL_TO }}"
          export GITHUB_RUN_NUMBER="${{ github.run_number }}"
          
          # Send email
          python3 send_email.py
